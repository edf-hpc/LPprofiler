#!/usr/bin/python3.4
# -*- coding: utf-8 -*-
##############################################################################
#  This file is part of the LPprofiler profiling tool.                       #
#        Copyright (C) 2017  EDF SA                                          #
#                                                                            #
#  LPprofiler is free software: you can redistribute it and/or modify        #
#  it under the terms of the GNU General Public License as published by      #
#  the Free Software Foundation, either version 3 of the License, or         #
#  (at your option) any later version.                                       #
#                                                                            #
#  LPprofiler is distributed in the hope that it will be useful,             #
#  but WITHOUT ANY WARRANTY; without even the implied warranty of            #
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the             #
#  GNU General Public License for more details.                              #
#                                                                            #
#  You should have received a copy of the GNU General Public License         #
#  along with LPprofiler.  If not, see <http://www.gnu.org/licenses/>.       #
#                                                                            #
############################################################################## 

import argparse
import os,sys
sys.path.insert(0,os.path.dirname(os.path.realpath(__file__))+"/..") # For debugging purpose
import lpprofiler.lp_profiler as lpp


def main():
    args = parse_args()

    # Build dictionnary with profiling args
    prof_args={}
    if args.frequency:
        prof_args["frequency"]=args.frequency
    
    # Build profiler 
    lpprof=lpp.LpProfiler(args.launcher,args.launcher_args,args.binary,prof_args)

    # Run profiling
    lpprof.run()

    # Print profiling report
    lpprof.report()

    
def parse_args():
    """ Manage arguments """
    parser = argparse.ArgumentParser(description='LPprofiler profiling tool.',\
                                 formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument('binary',help='binary to be profiled')
    parser.add_argument('-launcher',help='parallel jobs launcher (ex: srun)',required=True)
    parser.add_argument('-launcher_args',help='parallel jobs launcher arguments')
    parser.add_argument('-frequency',help='Sampling frequency, default is 99Hz')

    return parser.parse_args()

if __name__ == '__main__':
    main()
        
