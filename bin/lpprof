#!/usr/bin/python3.4
# -*- coding: utf-8 -*-
##############################################################################
#  This file is part of the LPprofiler profiling tool.                       #
#        Copyright (C) 2017  EDF SA                                          #
#                                                                            #
#  LPprofiler is free software: you can redistribute it and/or modify        #
#  it under the terms of the GNU General Public License as published by      #
#  the Free Software Foundation, either version 3 of the License, or         #
#  (at your option) any later version.                                       #
#                                                                            #
#  LPprofiler is distributed in the hope that it will be useful,             #
#  but WITHOUT ANY WARRANTY; without even the implied warranty of            #
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the             #
#  GNU General Public License for more details.                              #
#                                                                            #
#  You should have received a copy of the GNU General Public License         #
#  along with LPprofiler.  If not, see <http://www.gnu.org/licenses/>.       #
#                                                                            #
############################################################################## 

import argparse
import os,sys
sys.path.insert(0,os.path.dirname(os.path.realpath(__file__))+"/..") # For debugging purpose
import lpprofiler.lp_profiler as lpp


def main():
    args = parse_args()

    # Build dictionnary with profiling args
    prof_args={}
    pid=None
    launcher=None
    rank=None
    
    if args.frequency:
        prof_args["frequency"]=args.frequency
        
    if args.o:
        prof_args["output_dir"]=args.o

    print(args.flame)
    
    if args.flame:
        prof_args["flame_graph "]=args.flame

        
    if args.launcher:
        launcher=args.launcher
    else:
        pid=args.pid
        
    rank=args.rank

    
    # Build profiler 
    lpprof=lpp.LpProfiler(launcher,pid,args.rank,args.binary,prof_args)

    # Run profiling
    lpprof.run()

    # Print profiling report
    lpprof.report()

    
def parse_args():
    """ Manage arguments """
    parser = argparse.ArgumentParser(description='LPprofiler profiling tool.',\
                                 formatter_class=argparse.RawTextHelpFormatter)

    group = parser.add_mutually_exclusive_group(required=True)
    
    group.add_argument('-launcher',help='parallel jobs launcher (default=std)',
                       choices=["std","srun"],default='std')
    group.add_argument('-pid',help='pid of a processus to be profiled')



    parser.add_argument('-flame',action='store_true',
                        help='Build a Flame Graph. For a better result compile your code with -g and -fno-omit-frame-pointer.')
    parser.add_argument('-rank',help='rank of a processus to be profiled')
    parser.add_argument('-frequency',help='Sampling frequency, default is 99Hz')
    parser.add_argument('-o',help='Output directory, default is PERF_<date>')
    parser.add_argument('binary',help='binary to be profiled',nargs='?')


    return parser.parse_args()

if __name__ == '__main__':
    main()
        
