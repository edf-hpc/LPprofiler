:numbered:

= LPprof User Guide
CCN-HPC <dsp-cspit-ccn-hpc@edf.fr>
v1.0, 2017-10-17
:toc:
:data-uri:
:imagesdir: images

== What's LPprof ?

Lpprof combines Linux-tools perf record and perf stat commands on parallel processes.
It analyzes perf record samples and perf stat results to provide a performance summary.

== Obtaining, Building and Installating LPprof

LPprof's code is available at GitHub https://github.com/edf-hpc/lpprof[https://github.com/edf-hpc/lpprof].
You can clone it using *git*:

 $ git clone https://github.com/edf-hpc/lpprof.git

Debian packaging files are included, so if you are using a Debian or a Debian derivative system you only need to build a Debian package and install it. Before building the package, you need to install the following packages:

 $ apt-get install debhelper dh-python python3-all python3-setuptools pandoc dpkg-dev

If you are not using Debian, Lpprof provides a setuptools script for its installation.
Just run:

 $ python setup.py install
 

== Profiling with LPprof

=== Commands

Monoprocessus profiling :

 $ lpprof -frequency=<sampling_frequency(Hz)> <exe>

Profile a process given its PID :

 $ lpprof -frequency=<sampling_frequency(Hz)> -pid <pid> <exe>

Profile a program executed with a parallel launcher (ex: srun):

 $ lpprof -launcher=<launcher> -frequency=<sampling_frequency(Hz)> -pid <exe>


=== Results

LPprof makes a PERF_<date> directory that contains the following files at the end of the run :

 perf_data.<rank> (perf record output)
 perf_stat.<rank> (perf stat output)
 lprof_log_all    (lpprof log)

== Lpprof performance report

Lpprof performance report provides the following items.

*Elapsed time and instruction per cycle :*

Computed from cpu-clock, instructions, and cycles hardware counters.

*Percentage of cycles spent in page table walking caused by TLB miss :*

This metric uses hardware counters that are available on modern Intel
CPU at least from Sandy-Bridge to Kaby-Lake architectures.
It is computed as the following ratio :

  (ITLB_MISSES.WALK_DURATION + DTLB_MISSES.WALK_DURATION)*100 / cycles

*Assembly instructions representing 95% of collected samples :*

Table of occurence rate of assembly instructions.
Assembly instructions reported correspond to instruction pointer addresses found in perf samples.

* Floating point SSE,AVX,AVX(2) instructions proportion *

SSE, AVX and AVX2 proportion and vectorisation ratio are computed from assembly instructions samples.

* Symbols representing 95% of collected samples *

Table of occurence rate of symbols found in samples collected with perf record.
