#!/usr/bin/python3                                                                   
# -*- coding: utf-8 -*-
##############################################################################
#  This file is part of the LPprofiler profiling tool.                       #
#        Copyright (C) 2017  EDF SA                                          #
#                                                                            #
#  LPprofiler is free software: you can redistribute it and/or modify        #
#  it under the terms of the GNU General Public License as published by      #
#  the Free Software Foundation, either version 3 of the License, or         #
#  (at your option) any later version.                                       #
#                                                                            #
#  LPprofiler is distributed in the hope that it will be useful,             #
#  but WITHOUT ANY WARRANTY; without even the implied warranty of            #
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the             #
#  GNU General Public License for more details.                              #
#                                                                            #
#  You should have received a copy of the GNU General Public License         #
#  along with LPprofiler.  If not, see <http://www.gnu.org/licenses/>.       #
#                                                                            #
############################################################################## 

import unittest
import io,os,sys
sys.path.insert(0,os.path.dirname(os.path.realpath(__file__))+"/..") # For debugging purpose
import lpprofiler.perf_samples_analyzer as psa


class TestSamplesAnalyzerMethods(unittest.TestCase):
    def test_report_assembly_usage(self):
        psa_test=psa.PerfSamplesAnalyzer("")

        # Fill asm count dictionnary with random data
        psa_test._assembly_instructions_counts["vfmadd231pd"]=154
        psa_test._assembly_instructions_counts["add"]=15
        psa_test._assembly_instructions_counts["mov"]=43
        psa_test._assembly_instructions_counts["callq"]=12

        # Capture stdout
        capturedOutput = io.StringIO()
        sys.stdout = capturedOutput
        
        psa_test.report_assembly_usage()
        sys.stdout = sys.__stdout__

        expected_result=["asm instruction : vfmadd231pd occurence: 154 proportion: 68.75%",
                         "asm instruction : mov occurence: 43 proportion: 19.20%",
                         "asm instruction : add occurence: 15 proportion: 6.70%",
                         "asm instruction : callq occurence: 12 proportion: 5.36%"]
        
        for line,expected_line in zip(capturedOutput,expected_result):
             self.assertEqual(line,expected_line)
        
       # print('Captured'+capturedOutput.getvalue())
        
        
        
if __name__ == '__main__':
    unittest.main()
    


            
